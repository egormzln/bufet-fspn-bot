from datetime import datetime

from aiogram import F
from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers import flood_handler
from main import admin_users, bot, users_collection, logger, admin_check

router = Router(name='main_handlers')

command_list = {
    "start": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
    "admin_list": "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
    "push_post": "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞",
}

# @formatter:off
base_msgs = {
    "hello": {
        "admin":
"""
–ü—Ä–∏–≤–µ—Ç @{{username}}!\n–¢—ã –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ –±–æ—Ç–∞!

–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
{{command_list}}

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
""",
        "user":
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–º –±—É—Ñ–µ—Ç–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª"
    },
    "order":
"""
–ü—Ä–∏–≤–µ—Ç! –ó–∞—Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏? 

–í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –±–ª—é–¥–æ üëáüèº
""",
    "order_create" : "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —á–µ—Ä–µ–∑ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç",
    "flood": "–û–π-–æ–π, –ø–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –≤—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –º–µ–Ω—é üòâ",
}
# @formatter:on

keyboards = {
    "get_order": {
        "get_order_0": "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ü•ê",
    },
    "create_order": {
        "create_order_0": "–ö–æ–ª–ª–ª–æ–∫–≤–∏—É–º —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏",
        "create_order_1": "–ü–æ–±–µ–¥–Ω—ã–µ —Ç–æ—Å—Ç—ã",
        "create_order_2": "–≠–ª–∏–∫—Å–∏—Ä —Å—á–∞—Å—Ç—å—è",
        "create_order_3": "–°—ã—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è",
        "create_order_4": "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ",
    }
}

photo_ids = {
    "hello_img": "AgACAgIAAxkBAAIBU2cXjtoR8h_nRQ7NIhrLB9A0NFzUAAJs2jEbF_jASEnegEN2UbXWAQADAgADeQADNgQ",
    "get_order_img": "AgACAgIAAxkBAAIBVGcXjtoPikhE2S9DLq5jXyKITAIlAAJt2jEbF_jASBDzoRwskLLgAQADAgADeQADNgQ",
    "order_create_img": "AgACAgIAAxkBAAIBVWcXjtondpnfeEg4eYnEnN189C3XAAJu2jEbF_jASGeMd0SQAi5TAQADAgADeQADNgQ",
}


@router.message(CommandStart())
async def start_handler(msg: Message):
    await _save_user_info(msg)

    if admin_check(msg.from_user.id):
        msg_command_list = "\n".join([f"/{key} - {value}" for key, value in command_list.items()])
        await msg.answer(
            base_msgs["hello"]["admin"]
            .replace("{{username}}", msg.from_user.username)
            .replace("{{user_hello}}", base_msgs["hello"]["user"])
            .replace("{{command_list}}", msg_command_list),
        )
        # await user_hello(msg, disable_keyboard=True)
        await _user_hello_msg(msg)
    else:
        await _user_hello_msg(msg)


async def _user_hello_msg(msg: Message, disable_keyboard: bool = False):
    keyboard = InlineKeyboardBuilder()

    for el in keyboards["get_order"].items():
        button = InlineKeyboardButton(callback_data=el[0], text=el[1])
        keyboard.row(button)

    async with ChatActionSender(bot=bot, chat_id=msg.from_user.id, action="typing"):
        await bot.send_photo(
            chat_id=msg.chat.id,
            photo=photo_ids["hello_img"],
            caption=base_msgs["hello"]["user"],
            reply_markup=keyboard.as_markup(resize_keyboard=True) if not disable_keyboard else None
        )


async def _save_user_info(msg: Message):
    user_data = {
        "tg_id": msg.from_user.id,
        "chat_id": msg.chat.id,
        "username": msg.from_user.username if msg.from_user.last_name is not None else "",
        "first_name": msg.from_user.first_name,
        "last_name": msg.from_user.last_name if msg.from_user.last_name is not None else "",
        "date": str(datetime.now())
    }

    user = (msg.from_user.username, msg.from_user.id)

    if await users_collection.find_one({'tg_id': msg.from_user.id}) is None:
        try:
            await users_collection.insert_one(user_data)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞–µ–ª—å @{user[0]} {user[1]} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
        except:
            logger.info(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user[0]} {user[1]} –≤ –ë–î')
    else:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user[0]} {user[1]} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')


@router.callback_query(F.data.startswith('get_order'))
async def get_order_callback_query(call: CallbackQuery):
    await call.answer()

    keyboard = InlineKeyboardBuilder()

    for el in keyboards["create_order"].items():
        button = InlineKeyboardButton(callback_data=el[0], text=el[1])
        keyboard.row(button)

    async with ChatActionSender(bot=bot, chat_id=call.message.from_user.id, action="typing"):
        await bot.edit_message_media(
            media=InputMediaPhoto(media=photo_ids["get_order_img"]),
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
        )
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=base_msgs["order"],
            reply_markup=keyboard.as_markup()
        )


@router.callback_query(F.data.startswith('create_order_'))
async def get_order_callback_query(call: CallbackQuery):
    await call.answer()

    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await bot.edit_message_media(
            media=InputMediaPhoto(media=photo_ids["order_create_img"]),
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
        )

        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=base_msgs["order_create"],
        )


@router.message(Command("admin_list"))
async def admin_list_handler(msg: Message):
    if admin_check(msg.from_user.id):
        msg_admin_list = "\n".join(f"@{_}" for _ in admin_users)
        await msg.reply(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{msg_admin_list}")
    else:
        await flood_handler.flood_handler(msg)
